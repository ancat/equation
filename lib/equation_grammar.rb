# Autogenerated from a Treetop grammar. Edits may be lost.


module Equation
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        node_cache[:expression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_logical
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_comparison
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_additive
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_standalone
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module Logical0
    def operator
      elements[0]
    end

    def space1
      elements[1]
    end

    def rhs
      elements[2]
    end

    def space2
      elements[3]
    end
  end

  module Logical1
    def lhs
      elements[0]
    end

    def space
      elements[1]
    end

    def tail
      elements[2]
    end
  end

  module Logical2
    def value(ctx:)
      base = lhs.value(ctx: ctx)
      tail.elements.each do |k|
        case k.operator.text_value
          when '||'
            base ||= k.rhs.value(ctx: ctx)
          end
        end

      base
    end
  end

  def _nt_logical
    start_index = index
    if node_cache[:logical].has_key?(index)
      cached = node_cache[:logical][index]
      if cached
        node_cache[:logical][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_boolean_and
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_additive
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          if (match_len = has_terminal?('||', false, index))
            r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'||\'')
            r7 = nil
          end
          s6 << r7
          if r7
            r8 = _nt_space
            s6 << r8
            if r8
              i9 = index
              r10 = _nt_boolean_and
              if r10
                r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                r9 = r10
              else
                r11 = _nt_additive
                if r11
                  r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                  r9 = r11
                else
                  @index = i9
                  r9 = nil
                end
              end
              s6 << r9
              if r9
                r12 = _nt_space
                s6 << r12
              end
            end
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(Logical0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Logical1)
      r0.extend(Logical2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:logical][start_index] = r0

    r0
  end

  module BooleanAnd0
    def operator
      elements[0]
    end

    def space1
      elements[1]
    end

    def rhs
      elements[2]
    end

    def space2
      elements[3]
    end
  end

  module BooleanAnd1
    def lhs
      elements[0]
    end

    def space
      elements[1]
    end

    def tail
      elements[2]
    end
  end

  module BooleanAnd2
    def value(ctx:)
      base = lhs.value(ctx: ctx)
      tail.elements.each do |k|
        case k.operator.text_value
          when '&&'
            base &&= k.rhs.value(ctx: ctx)
        end
      end

      base
    end
  end

  def _nt_boolean_and
    start_index = index
    if node_cache[:boolean_and].has_key?(index)
      cached = node_cache[:boolean_and][index]
      if cached
        node_cache[:boolean_and][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_comparison
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      r3 = _nt_additive
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_space
      s0 << r4
      if r4
        s5, i5 = [], index
        loop do
          i6, s6 = index, []
          if (match_len = has_terminal?('&&', false, index))
            r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'&&\'')
            r7 = nil
          end
          s6 << r7
          if r7
            r8 = _nt_space
            s6 << r8
            if r8
              i9 = index
              r10 = _nt_comparison
              if r10
                r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                r9 = r10
              else
                r11 = _nt_additive
                if r11
                  r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                  r9 = r11
                else
                  @index = i9
                  r9 = nil
                end
              end
              s6 << r9
              if r9
                r12 = _nt_space
                s6 << r12
              end
            end
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(BooleanAnd0)
          else
            @index = i6
            r6 = nil
          end
          if r6
            s5 << r6
          else
            break
          end
        end
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BooleanAnd1)
      r0.extend(BooleanAnd2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boolean_and][start_index] = r0

    r0
  end

  module Comparison0
    def lhs
      elements[0]
    end

    def space1
      elements[1]
    end

    def operator
      elements[2]
    end

    def space2
      elements[3]
    end

    def rhs
      elements[4]
    end

    def space3
      elements[5]
    end
  end

  module Comparison1
    def value(ctx:)
      case operator.text_value
        when 'in'
          return rhs.value(ctx: ctx).include?(lhs.value(ctx: ctx))
        when '<='
          return lhs.value(ctx: ctx) <= rhs.value(ctx: ctx)
        when '<'
          return lhs.value(ctx: ctx) < rhs.value(ctx: ctx)
        when '>='
          return lhs.value(ctx: ctx) >= rhs.value(ctx: ctx)
        when '>'
          return lhs.value(ctx: ctx) > rhs.value(ctx: ctx)
        when '=='
          return lhs.value(ctx: ctx) == rhs.value(ctx: ctx)
        when '!='
          return lhs.value(ctx: ctx) != rhs.value(ctx: ctx)
        when '=~'
          expression = Regexp.new rhs.value(ctx: ctx)
          return !(lhs.value(ctx: ctx) =~ expression).nil?
      end
    end
  end

  def _nt_comparison
    start_index = index
    if node_cache[:comparison].has_key?(index)
      cached = node_cache[:comparison][index]
      if cached
        node_cache[:comparison][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_additive
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        i3 = index
        if (match_len = has_terminal?('in', false, index))
          r4 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'in\'')
          r4 = nil
        end
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r3 = r4
        else
          if (match_len = has_terminal?('<=', false, index))
            r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
            @index += match_len
          else
            terminal_parse_failure('\'<=\'')
            r5 = nil
          end
          if r5
            r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
            r3 = r5
          else
            if (match_len = has_terminal?('<', false, index))
              r6 = true
              @index += match_len
            else
              terminal_parse_failure('\'<\'')
              r6 = nil
            end
            if r6
              r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
              r3 = r6
            else
              if (match_len = has_terminal?('>=', false, index))
                r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                @index += match_len
              else
                terminal_parse_failure('\'>=\'')
                r7 = nil
              end
              if r7
                r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
                r3 = r7
              else
                if (match_len = has_terminal?('>', false, index))
                  r8 = true
                  @index += match_len
                else
                  terminal_parse_failure('\'>\'')
                  r8 = nil
                end
                if r8
                  r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                  r3 = r8
                else
                  if (match_len = has_terminal?('==', false, index))
                    r9 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                    @index += match_len
                  else
                    terminal_parse_failure('\'==\'')
                    r9 = nil
                  end
                  if r9
                    r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                    r3 = r9
                  else
                    if (match_len = has_terminal?('!=', false, index))
                      r10 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                      @index += match_len
                    else
                      terminal_parse_failure('\'!=\'')
                      r10 = nil
                    end
                    if r10
                      r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                      r3 = r10
                    else
                      if (match_len = has_terminal?('=~', false, index))
                        r11 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                        @index += match_len
                      else
                        terminal_parse_failure('\'=~\'')
                        r11 = nil
                      end
                      if r11
                        r11 = SyntaxNode.new(input, (index-1)...index) if r11 == true
                        r3 = r11
                      else
                        @index = i3
                        r3 = nil
                      end
                    end
                  end
                end
              end
            end
          end
        end
        s0 << r3
        if r3
          r12 = _nt_space
          s0 << r12
          if r12
            r13 = _nt_additive
            s0 << r13
            if r13
              r14 = _nt_space
              s0 << r14
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comparison0)
      r0.extend(Comparison1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comparison][start_index] = r0

    r0
  end

  module Additive0
    def space1
      elements[0]
    end

    def operator
      elements[1]
    end

    def space2
      elements[2]
    end

    def operand
      elements[3]
    end
  end

  module Additive1
    def head
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  module Additive2
    def value(ctx:)
      base = head.value(ctx: ctx)
      tail.elements.each do |k|
        case k.operator.text_value
          when '+'
            base += k.operand.value(ctx: ctx)
          when '-'
            base -= k.operand.value(ctx: ctx)
        end
      end

      base
    end
  end

  def _nt_additive
    start_index = index
    if node_cache[:additive].has_key?(index)
      cached = node_cache[:additive][index]
      if cached
        node_cache[:additive][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_multitive
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_space
        s3 << r4
        if r4
          i5 = index
          if (match_len = has_terminal?('+', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\'+\'')
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            if (match_len = has_terminal?('-', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\'-\'')
              r7 = nil
            end
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          s3 << r5
          if r5
            r8 = _nt_space
            s3 << r8
            if r8
              r9 = _nt_multitive
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Additive0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Additive1)
      r0.extend(Additive2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:additive][start_index] = r0

    r0
  end

  module Multitive0
    def space1
      elements[0]
    end

    def operator
      elements[1]
    end

    def space2
      elements[2]
    end

    def operand
      elements[3]
    end
  end

  module Multitive1
    def head
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  module Multitive2
    def value(ctx:)
      base = head.value(ctx: ctx)
      tail.elements.each do |k|
        case k.operator.text_value
          when '*'
            base *= k.operand.value(ctx: ctx)
          when '/'
            base /= k.operand.value(ctx: ctx)
        end
      end

      base
    end
  end

  def _nt_multitive
    start_index = index
    if node_cache[:multitive].has_key?(index)
      cached = node_cache[:multitive][index]
      if cached
        node_cache[:multitive][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_standalone
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_space
        s3 << r4
        if r4
          i5 = index
          if (match_len = has_terminal?('*', false, index))
            r6 = true
            @index += match_len
          else
            terminal_parse_failure('\'*\'')
            r6 = nil
          end
          if r6
            r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
            r5 = r6
          else
            if (match_len = has_terminal?('/', false, index))
              r7 = true
              @index += match_len
            else
              terminal_parse_failure('\'/\'')
              r7 = nil
            end
            if r7
              r7 = SyntaxNode.new(input, (index-1)...index) if r7 == true
              r5 = r7
            else
              @index = i5
              r5 = nil
            end
          end
          s3 << r5
          if r5
            r8 = _nt_space
            s3 << r8
            if r8
              r9 = _nt_standalone
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Multitive0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Multitive1)
      r0.extend(Multitive2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:multitive][start_index] = r0

    r0
  end

  def _nt_standalone
    start_index = index
    if node_cache[:standalone].has_key?(index)
      cached = node_cache[:standalone][index]
      if cached
        node_cache[:standalone][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_symbol
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_method_call
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_literals
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_subexpression
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:standalone][start_index] = r0

    r0
  end

  module Subexpression0
    def expression
      elements[1]
    end

  end

  module Subexpression1
    def value(ctx:)
      expression.value(ctx: ctx)
    end
  end

  def _nt_subexpression
    start_index = index
    if node_cache[:subexpression].has_key?(index)
      cached = node_cache[:subexpression][index]
      if cached
        node_cache[:subexpression][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('(', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'(\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_expression
      s0 << r2
      if r2
        if (match_len = has_terminal?(')', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\')\'')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Subexpression0)
      r0.extend(Subexpression1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:subexpression][start_index] = r0

    r0
  end

  module MethodCall0
  end

  module MethodCall1
    def space1
      elements[0]
    end

    def space2
      elements[2]
    end

    def expression
      elements[3]
    end
  end

  module MethodCall2
    def arg0
      elements[0]
    end

    def space
      elements[1]
    end

    def argN
      elements[2]
    end
  end

  module MethodCall3
    def root
      elements[0]
    end

    def space
      elements[2]
    end

    def args
      elements[3]
    end

  end

  module MethodCall4
    def value(ctx:)
      arguments = []
      arguments << args.arg0.value(ctx: ctx) if args.arg0.respond_to?(:value)
      args.argN.elements.each{|argN|
        arguments << argN.elements[3].value(ctx: ctx) if args.arg0.respond_to?(:value)
      }

      ctx.call(method: root.text_value, args: arguments)
    end
  end

  def _nt_method_call
    start_index = index
    if node_cache[:method_call].has_key?(index)
      cached = node_cache[:method_call][index]
      if cached
        node_cache[:method_call][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1, s1 = index, []
    if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
      r2 = true
      @index += 1
    else
      terminal_parse_failure('[a-zA-Z]')
      r2 = nil
    end
    s1 << r2
    if r2
      s3, i3 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
          r4 = true
          @index += 1
        else
          terminal_parse_failure('[a-zA-Z0-9_]')
          r4 = nil
        end
        if r4
          s3 << r4
        else
          break
        end
      end
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(MethodCall0)
    else
      @index = i1
      r1 = nil
    end
    s0 << r1
    if r1
      if (match_len = has_terminal?('(', false, index))
        r5 = true
        @index += match_len
      else
        terminal_parse_failure('\'(\'')
        r5 = nil
      end
      s0 << r5
      if r5
        r6 = _nt_space
        s0 << r6
        if r6
          i8, s8 = index, []
          r10 = _nt_expression
          if r10
            r9 = r10
          else
            r9 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r9
          if r9
            r11 = _nt_space
            s8 << r11
            if r11
              s12, i12 = [], index
              loop do
                i13, s13 = index, []
                r14 = _nt_space
                s13 << r14
                if r14
                  if (match_len = has_terminal?(',', false, index))
                    r15 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\',\'')
                    r15 = nil
                  end
                  s13 << r15
                  if r15
                    r16 = _nt_space
                    s13 << r16
                    if r16
                      r17 = _nt_expression
                      s13 << r17
                    end
                  end
                end
                if s13.last
                  r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
                  r13.extend(MethodCall1)
                else
                  @index = i13
                  r13 = nil
                end
                if r13
                  s12 << r13
                else
                  break
                end
              end
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              s8 << r12
            end
          end
          if s8.last
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            r8.extend(MethodCall2)
          else
            @index = i8
            r8 = nil
          end
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r7
          if r7
            if (match_len = has_terminal?(')', false, index))
              r18 = true
              @index += match_len
            else
              terminal_parse_failure('\')\'')
              r18 = nil
            end
            s0 << r18
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MethodCall3)
      r0.extend(MethodCall4)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_call][start_index] = r0

    r0
  end

  def _nt_literals
    start_index = index
    if node_cache[:literals].has_key?(index)
      cached = node_cache[:literals][index]
      if cached
        node_cache[:literals][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_array_literal
    if r1
      r1 = SyntaxNode.new(input, (index-1)...index) if r1 == true
      r0 = r1
    else
      r2 = _nt_nil_literal
      if r2
        r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
        r0 = r2
      else
        r3 = _nt_boolean_literal
        if r3
          r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
          r0 = r3
        else
          r4 = _nt_string_literal
          if r4
            r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
            r0 = r4
          else
            r5 = _nt_range_literal
            if r5
              r5 = SyntaxNode.new(input, (index-1)...index) if r5 == true
              r0 = r5
            else
              r6 = _nt_numeric_literal
              if r6
                r6 = SyntaxNode.new(input, (index-1)...index) if r6 == true
                r0 = r6
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end
    end

    node_cache[:literals][start_index] = r0

    r0
  end

  module StringLiteral0
  end

  module StringLiteral1
    def string
      elements[1]
    end

  end

  module StringLiteral2
    def value(ctx:)
      string.text_value
    end
  end

  def _nt_string_literal
    start_index = index
    if node_cache[:string_literal].has_key?(index)
      cached = node_cache[:string_literal][index]
      if cached
        node_cache[:string_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('"', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'"\'')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if (match_len = has_terminal?('"', false, index))
          r5 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r5 = nil
        end
        if r5
          @index = i4
          r4 = nil
          terminal_parse_failure('\'"\'', true)
        else
          @terminal_failures.pop
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = true
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(StringLiteral0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if (match_len = has_terminal?('"', false, index))
          r7 = true
          @index += match_len
        else
          terminal_parse_failure('\'"\'')
          r7 = nil
        end
        s0 << r7
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StringLiteral1)
      r0.extend(StringLiteral2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string_literal][start_index] = r0

    r0
  end

  module NumericLiteral0
  end

  module NumericLiteral1
  end

  module NumericLiteral2
    def numeric
      elements[0]
    end
  end

  module NumericLiteral3
    def value(ctx:)
      numeric.text_value.to_f
    end
  end

  def _nt_numeric_literal
    start_index = index
    if node_cache[:numeric_literal].has_key?(index)
      cached = node_cache[:numeric_literal][index]
      if cached
        node_cache[:numeric_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1, s1 = index, []
    if (match_len = has_terminal?('-', false, index))
      r3 = true
      @index += match_len
    else
      terminal_parse_failure('\'-\'')
      r3 = nil
    end
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      s4, i4 = [], index
      loop do
        if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
          r5 = true
          @index += 1
        else
          terminal_parse_failure('[0-9]')
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s1 << r4
      if r4
        i7, s7 = index, []
        if (match_len = has_terminal?('.', false, index))
          r8 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r8 = nil
        end
        s7 << r8
        if r8
          s9, i9 = [], index
          loop do
            if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
              r10 = true
              @index += 1
            else
              terminal_parse_failure('[0-9]')
              r10 = nil
            end
            if r10
              s9 << r10
            else
              break
            end
          end
          if s9.empty?
            @index = i9
            r9 = nil
          else
            r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
          end
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(NumericLiteral0)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r6
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(NumericLiteral1)
    else
      @index = i1
      r1 = nil
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(NumericLiteral,input, i0...index, s0)
      r0.extend(NumericLiteral2)
      r0.extend(NumericLiteral3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_literal][start_index] = r0

    r0
  end

  module BooleanLiteral0
    def boolean
      elements[0]
    end
  end

  module BooleanLiteral1
    def value(ctx:)
      boolean.text_value == "true"
    end
  end

  def _nt_boolean_literal
    start_index = index
    if node_cache[:boolean_literal].has_key?(index)
      cached = node_cache[:boolean_literal][index]
      if cached
        node_cache[:boolean_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if (match_len = has_terminal?("true", false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('"true"')
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      if (match_len = has_terminal?("false", false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('"false"')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(BooleanLiteral,input, i0...index, s0)
      r0.extend(BooleanLiteral0)
      r0.extend(BooleanLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boolean_literal][start_index] = r0

    r0
  end

  module NilLiteral0
    def nil
      elements[0]
    end
  end

  module NilLiteral1
    def value(ctx:)
      nil
    end
  end

  def _nt_nil_literal
    start_index = index
    if node_cache[:nil_literal].has_key?(index)
      cached = node_cache[:nil_literal][index]
      if cached
        node_cache[:nil_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if (match_len = has_terminal?('nil', false, index))
      r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'nil\'')
      r2 = nil
    end
    if r2
      r2 = SyntaxNode.new(input, (index-1)...index) if r2 == true
      r1 = r2
    else
      if (match_len = has_terminal?('null', false, index))
        r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'null\'')
        r3 = nil
      end
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(NilLiteral,input, i0...index, s0)
      r0.extend(NilLiteral0)
      r0.extend(NilLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:nil_literal][start_index] = r0

    r0
  end

  module ArrayLiteral0
    def space1
      elements[0]
    end

    def space2
      elements[2]
    end

    def element
      elements[3]
    end
  end

  module ArrayLiteral1
    def elem0
      elements[0]
    end

    def space
      elements[1]
    end

    def elemN
      elements[2]
    end
  end

  module ArrayLiteral2
    def space1
      elements[1]
    end

    def space2
      elements[2]
    end

    def elems
      elements[3]
    end

  end

  module ArrayLiteral3
    def value(ctx:)
      elements = []
      elements << elems.elem0.value(ctx: ctx) if elems.elem0.respond_to?(:value)
      elems.elemN.elements.each{|elemN|
        elements << elemN.element.value(ctx: ctx)
      }

      elements
    end
  end

  def _nt_array_literal
    start_index = index
    if node_cache[:array_literal].has_key?(index)
      cached = node_cache[:array_literal][index]
      if cached
        node_cache[:array_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('[', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'[\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_space
        s0 << r3
        if r3
          i5, s5 = index, []
          r7 = _nt_standalone
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            r8 = _nt_space
            s5 << r8
            if r8
              s9, i9 = [], index
              loop do
                i10, s10 = index, []
                r11 = _nt_space
                s10 << r11
                if r11
                  if (match_len = has_terminal?(',', false, index))
                    r12 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\',\'')
                    r12 = nil
                  end
                  s10 << r12
                  if r12
                    r13 = _nt_space
                    s10 << r13
                    if r13
                      r14 = _nt_standalone
                      s10 << r14
                    end
                  end
                end
                if s10.last
                  r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                  r10.extend(ArrayLiteral0)
                else
                  @index = i10
                  r10 = nil
                end
                if r10
                  s9 << r10
                else
                  break
                end
              end
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
              s5 << r9
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(ArrayLiteral1)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            if (match_len = has_terminal?(']', false, index))
              r15 = true
              @index += match_len
            else
              terminal_parse_failure('\']\'')
              r15 = nil
            end
            s0 << r15
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ArrayLiteral,input, i0...index, s0)
      r0.extend(ArrayLiteral2)
      r0.extend(ArrayLiteral3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:array_literal][start_index] = r0

    r0
  end

  module RangeLiteral0
    def start
      elements[0]
    end

    def operator
      elements[1]
    end

    def ending
      elements[2]
    end
  end

  module RangeLiteral1
    def value(ctx:)
      Range.new(start.text_value.to_i, ending.text_value.to_i)
    end
  end

  def _nt_range_literal
    start_index = index
    if node_cache[:range_literal].has_key?(index)
      cached = node_cache[:range_literal][index]
      if cached
        node_cache[:range_literal][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_numeric_literal
    s0 << r1
    if r1
      if (match_len = has_terminal?('..', false, index))
        r2 = instantiate_node(SyntaxNode,input, index...(index + match_len))
        @index += match_len
      else
        terminal_parse_failure('\'..\'')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_numeric_literal
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(RangeLiteral,input, i0...index, s0)
      r0.extend(RangeLiteral0)
      r0.extend(RangeLiteral1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:range_literal][start_index] = r0

    r0
  end

  module Symbol0
  end

  module Symbol1
  end

  module Symbol2
    def root
      elements[1]
    end

    def path
      elements[2]
    end
  end

  module Symbol3
    def value(ctx:)
      ctx.get(identifier: root.text_value, path: path.elements)
    end
  end

  def _nt_symbol
    start_index = index
    if node_cache[:symbol].has_key?(index)
      cached = node_cache[:symbol][index]
      if cached
        node_cache[:symbol][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('$', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'$\'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2, s2 = index, []
      if has_terminal?(@regexps[gr = '\A[a-zA-Z]'] ||= Regexp.new(gr), :regexp, index)
        r3 = true
        @index += 1
      else
        terminal_parse_failure('[a-zA-Z]')
        r3 = nil
      end
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
            r5 = true
            @index += 1
          else
            terminal_parse_failure('[a-zA-Z0-9_]')
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Symbol0)
      else
        @index = i2
        r2 = nil
      end
      s0 << r2
      if r2
        s6, i6 = [], index
        loop do
          i7, s7 = index, []
          if (match_len = has_terminal?('.', false, index))
            r8 = true
            @index += match_len
          else
            terminal_parse_failure('\'.\'')
            r8 = nil
          end
          s7 << r8
          if r8
            s9, i9 = [], index
            loop do
              if has_terminal?(@regexps[gr = '\A[a-zA-Z0-9_]'] ||= Regexp.new(gr), :regexp, index)
                r10 = true
                @index += 1
              else
                terminal_parse_failure('[a-zA-Z0-9_]')
                r10 = nil
              end
              if r10
                s9 << r10
              else
                break
              end
            end
            if s9.empty?
              @index = i9
              r9 = nil
            else
              r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
            end
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(Symbol1)
          else
            @index = i7
            r7 = nil
          end
          if r7
            s6 << r7
          else
            break
          end
        end
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Symbol2)
      r0.extend(Symbol3)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:symbol][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[ \\t\\n\\r]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[ \\t\\n\\r]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:space][start_index] = r0

    r0
  end

end

class EquationParser < Treetop::Runtime::CompiledParser
  include Equation
end

